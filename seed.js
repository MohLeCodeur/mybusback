// backend/clear-reservations.js
// Ce script supprime TOUTES les r√©servations de la base de donn√©es.
// Il ne touche PAS aux autres collections (bus, trajets, etc.).

require('dotenv').config();
const { MongoClient } = require('mongodb');

// URI de connexion √† MongoDB
const uri = process.env.MONGO_URI;
if (!uri) {
  console.error('‚ùå Erreur: Veuillez ajouter MONGO_URI √† votre fichier .env');
  process.exit(1);
}

const client = new MongoClient(uri);

const run = async () => {
  try {
    // 1. Connexion √† la base de donn√©es
    await client.connect();
    console.log('‚úÖ Connect√© √† MongoDB');

    // 2. S√©lection de la base de donn√©es et de la collection 'reservations'
    const db = client.db();
    const reservationsCollection = db.collection('reservations');
    console.log("Ciblage de la collection 'reservations'...");

    // 3. Compter le nombre de r√©servations avant suppression
    const countBefore = await reservationsCollection.countDocuments();
    if (countBefore === 0) {
      console.log('‚ÑπÔ∏è Aucune r√©servation √† supprimer. La collection est d√©j√† vide.');
      return; // On sort du script si il n'y a rien √† faire
    }
    console.log(`üîç Trouv√© ${countBefore} r√©servation(s) √† supprimer.`);
    
    // 4. Suppression de tous les documents dans la collection
    const deleteResult = await reservationsCollection.deleteMany({});
    console.log(`‚úÖ Succ√®s ! ${deleteResult.deletedCount} r√©servation(s) ont √©t√© supprim√©es.`);

  } catch (err) {
    console.error("‚ùå Une erreur est survenue lors de la suppression des r√©servations:", err);
  } finally {
    // 5. Fermeture de la connexion
    await client.close();
    console.log('Connexion √† MongoDB ferm√©e.');
  }
};

// Lancement du script
run();